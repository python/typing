conformant = "Partial"
notes = """
Does not enforce that tuples captured by TypeVarTuple are same length.
Does not enforce that tuples captured by TypeVarTuple are same type.
"""
output = """
generics_typevartuple_basic.py:42: error: Argument 1 to "Array" has incompatible type "Height"; expected "tuple[Height, Width]"  [arg-type]
generics_typevartuple_basic.py:43: error: Argument 1 to "Array" has incompatible type "tuple[Batch, Width]"; expected "tuple[Batch, Height, Width]"  [arg-type]
generics_typevartuple_basic.py:45: error: Argument 1 to "Array" has incompatible type "tuple[Time, Batch, Width, Height]"; expected "tuple[Time, Batch, Height, Width]"  [arg-type]
generics_typevartuple_basic.py:52: error: Free type variable expected in Generic[...]  [misc]
generics_typevartuple_basic.py:53: error: TypeVarTuple "Shape" is only valid with an unpack  [valid-type]
generics_typevartuple_basic.py:56: error: TypeVarTuple "Shape" is only valid with an unpack  [valid-type]
generics_typevartuple_basic.py:57: error: Incompatible return value type (got "tuple[*Shape]", expected "tuple[Any]")  [return-value]
generics_typevartuple_basic.py:59: error: TypeVarTuple "Shape" is only valid with an unpack  [valid-type]
generics_typevartuple_basic.py:65: error: Unexpected keyword argument "covariant" for "TypeVarTuple"  [misc]
generics_typevartuple_basic.py:66: error: Too many positional arguments for "TypeVarTuple"  [misc]
generics_typevartuple_basic.py:67: error: Unexpected keyword argument "bound" for "TypeVarTuple"  [misc]
generics_typevartuple_basic.py:99: error: Cannot infer type argument 1 of "multiply"  [misc]
generics_typevartuple_basic.py:100: error: Cannot infer type argument 1 of "multiply"  [misc]
generics_typevartuple_basic.py:106: error: Can only use one type var tuple in a class def  [misc]
"""
conformance_automated = "Fail"
errors_diff = """
Line 89: Expected 1 errors
Line 90: Expected 1 errors
Line 57: Unexpected errors ['generics_typevartuple_basic.py:57: error: Incompatible return value type (got "tuple[*Shape]", expected "tuple[Any]")  [return-value]']
"""
