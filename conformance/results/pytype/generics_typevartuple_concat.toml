conformant = "Unsupported"
notes = """
Does not support TypeVarTuple.
"""
output = """
generics_typevartuple_concat.py:9:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: typing.TypeVarTuple not supported yet [not-supported-yet]

from typing import Generic, NewType, TypeVar, TypeVarTuple, assert_type
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:17:9: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Function TypeVarTuple.__init__ expects 1 arg(s), got 2 [wrong-arg-count]

Shape = TypeVarTuple("Shape")
        \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:18:6: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Function TypeVarTuple.__init__ expects 1 arg(s), got 2 [wrong-arg-count]

Ts = TypeVarTuple("Ts")
     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:22:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Array(Generic[*Ts]):
            \u001b[1m\u001b[31m~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:26:23: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Array is not indexable [not-indexable]

def add_batch_axis(x: Array[*Shape]) -> Array[Batch, *Shape]:
                      \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:26:41: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Array is not indexable [not-indexable]

def add_batch_axis(x: Array[*Shape]) -> Array[Batch, *Shape]:
                                        \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:27:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in add_batch_axis: bad return type [bad-return-type]

    ...
    \u001b[1m\u001b[31m~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:30:23: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Array is not indexable [not-indexable]

def del_batch_axis(x: Array[Batch, *Shape]) -> Array[*Shape]:
                      \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:30:48: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Array is not indexable [not-indexable]

def del_batch_axis(x: Array[Batch, *Shape]) -> Array[*Shape]:
                                               \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:31:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in del_batch_axis: bad return type [bad-return-type]

    ...
    \u001b[1m\u001b[31m~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:34:27: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Array is not indexable [not-indexable]

def add_batch_channels(x: Array[*Shape]) -> Array[Batch, *Shape, Channels]:
                          \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:34:45: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Array is not indexable [not-indexable]

def add_batch_channels(x: Array[*Shape]) -> Array[Batch, *Shape, Channels]:
                                            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:35:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in add_batch_channels: bad return type [bad-return-type]

    ...
    \u001b[1m\u001b[31m~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:38:14: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Array is not indexable [not-indexable]

def func1(a: Array[Height, Width]):
             \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:40:20: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in func1: class Array is not indexable [not-indexable]

    assert_type(b, Array[Batch, Height, Width])
                   \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:42:20: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in func1: class Array is not indexable [not-indexable]

    assert_type(c, Array[Height, Width])
                   \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:44:20: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in func1: class Array is not indexable [not-indexable]

    assert_type(d, Array[Batch, Height, Width, Channels])
                   \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:47:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'T'  [invalid-annotation]

def prefix_tuple(x: T, y: tuple[*Ts]) -> tuple[T, *Ts]:
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m
    ...
\u001b[1m\u001b[31m~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:47:27: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation '<instance of tuple[nothing, ...]>'  [invalid-annotation]

def prefix_tuple(x: T, y: tuple[*Ts]) -> tuple[T, *Ts]:
                          \u001b[1m\u001b[31m~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:47:42: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation '<instance of tuple[TypeVar, ...]>'  [invalid-annotation]

def prefix_tuple(x: T, y: tuple[*Ts]) -> tuple[T, *Ts]:
                                         \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:48:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in prefix_tuple: bad return type [bad-return-type]

    ...
    \u001b[1m\u001b[31m~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:51:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Function prefix_tuple was called with the wrong arguments [wrong-arg-types]

z = prefix_tuple(x=0, y=(True, "a"))
    \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:52:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Any [assert-type]

assert_type(z, tuple[int, bool, str])
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:55:55: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation '<instance of tuple[nothing, ...]>'  [invalid-annotation]

def move_first_element_to_last(tup: tuple[T, *Ts]) -> tuple[*Ts, T]:
                                                      \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_typevartuple_concat.py:55:37: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation '<instance of tuple[TypeVar, ...]>'  [invalid-annotation]

def move_first_element_to_last(tup: tuple[T, *Ts]) -> tuple[*Ts, T]:
                                    \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

"""
conformance_automated = "Fail"
errors_diff = """
Line 9: Unexpected errors ['generics_typevartuple_concat.py:9:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: typing.TypeVarTuple not supported yet [not-supported-yet]']
Line 17: Unexpected errors ['generics_typevartuple_concat.py:17:9: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Function TypeVarTuple.__init__ expects 1 arg(s), got 2 [wrong-arg-count]']
Line 18: Unexpected errors ['generics_typevartuple_concat.py:18:6: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Function TypeVarTuple.__init__ expects 1 arg(s), got 2 [wrong-arg-count]']
Line 22: Unexpected errors ["generics_typevartuple_concat.py:22:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 26: Unexpected errors ['generics_typevartuple_concat.py:26:23: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Array is not indexable [not-indexable]', 'generics_typevartuple_concat.py:26:41: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Array is not indexable [not-indexable]']
Line 27: Unexpected errors ['generics_typevartuple_concat.py:27:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in add_batch_axis: bad return type [bad-return-type]']
Line 30: Unexpected errors ['generics_typevartuple_concat.py:30:23: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Array is not indexable [not-indexable]', 'generics_typevartuple_concat.py:30:48: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Array is not indexable [not-indexable]']
Line 31: Unexpected errors ['generics_typevartuple_concat.py:31:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in del_batch_axis: bad return type [bad-return-type]']
Line 34: Unexpected errors ['generics_typevartuple_concat.py:34:27: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Array is not indexable [not-indexable]', 'generics_typevartuple_concat.py:34:45: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Array is not indexable [not-indexable]']
Line 35: Unexpected errors ['generics_typevartuple_concat.py:35:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in add_batch_channels: bad return type [bad-return-type]']
Line 38: Unexpected errors ['generics_typevartuple_concat.py:38:14: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Array is not indexable [not-indexable]']
Line 40: Unexpected errors ['generics_typevartuple_concat.py:40:20: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in func1: class Array is not indexable [not-indexable]']
Line 42: Unexpected errors ['generics_typevartuple_concat.py:42:20: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in func1: class Array is not indexable [not-indexable]']
Line 44: Unexpected errors ['generics_typevartuple_concat.py:44:20: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in func1: class Array is not indexable [not-indexable]']
Line 47: Unexpected errors ["generics_typevartuple_concat.py:47:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'T'  [invalid-annotation]", "generics_typevartuple_concat.py:47:27: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation '<instance of tuple[nothing, ...]>'  [invalid-annotation]", "generics_typevartuple_concat.py:47:42: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation '<instance of tuple[TypeVar, ...]>'  [invalid-annotation]"]
Line 48: Unexpected errors ['generics_typevartuple_concat.py:48:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in prefix_tuple: bad return type [bad-return-type]']
Line 51: Unexpected errors ['generics_typevartuple_concat.py:51:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Function prefix_tuple was called with the wrong arguments [wrong-arg-types]']
Line 52: Unexpected errors ['generics_typevartuple_concat.py:52:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Any [assert-type]']
Line 55: Unexpected errors ["generics_typevartuple_concat.py:55:55: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation '<instance of tuple[nothing, ...]>'  [invalid-annotation]", "generics_typevartuple_concat.py:55:37: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation '<instance of tuple[TypeVar, ...]>'  [invalid-annotation]"]
"""
