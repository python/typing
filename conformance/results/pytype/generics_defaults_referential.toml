conformant = "Unsupported"
output = """
generics_defaults_referential.py:14:15: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

DefaultStrT = TypeVar("DefaultStrT", default=str)
              \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:15:10: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

StartT = TypeVar("StartT", default=int)
         \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:16:9: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

StopT = TypeVar("StopT", default=StartT)
        \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:17:9: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

StepT = TypeVar("StepT", default=int | None)
        \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:20:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class slice(Generic[StartT, StopT, StepT]): ...
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:23:25: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class slice is not indexable [not-indexable]

assert_type(slice, type[slice[int, int, int | None]])
                        \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:24:22: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class slice is not indexable [not-indexable]

assert_type(slice(), slice[int, int, int | None])
                     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:25:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class slice is not indexable [not-indexable]

assert_type(slice[str](), slice[str, str, int | None])
            \u001b[1m\u001b[31m~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:25:27: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class slice is not indexable [not-indexable]

assert_type(slice[str](), slice[str, str, int | None])
                          \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:26:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class slice is not indexable [not-indexable]

assert_type(slice[str, bool, complex](), slice[str, bool, complex])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:26:42: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class slice is not indexable [not-indexable]

assert_type(slice[str, bool, complex](), slice[str, bool, complex])
                                         \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:28:6: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

T2 = TypeVar("T2", default=DefaultStrT)
     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:31:11: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Foo(Generic[DefaultStrT, T2]):
          \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:35:25: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo is not indexable [not-indexable]

assert_type(Foo(1, ""), Foo[int, str])
                        \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:36:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo is not indexable [not-indexable]

Foo[int](1, "")  # E: Foo[int, str] cannot be assigned to self: Foo[int, int] in Foo.__init__
\u001b[1m\u001b[31m~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:37:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo is not indexable [not-indexable]

Foo[int]("", 1)  # E: Foo[str, int] cannot be assigned to self: Foo[int, int] in Foo.__init__
\u001b[1m\u001b[31m~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:43:6: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

S2 = TypeVar("S2", default=S1)
     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:46:12: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Foo2(Generic[S1, S2]): ...  # OK
           \u001b[1m\u001b[31m~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:49:11: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

Start2T = TypeVar("Start2T", default="StopT")
          \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:50:10: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

Stop2T = TypeVar("Stop2T", default=int)
         \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:53:14: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class slice2(Generic[Start2T, Stop2T, StepT]): ...  # E: bad ordering
             \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:60:16: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in Foo3: Invalid type annotation 'Generic'  [invalid-annotation]

    class Bar2(Generic[S2]): ...  # E
               \u001b[1m\u001b[31m~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:66:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("Ok1", default=X1, bound=float)  # OK
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:67:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("AlsoOk1", default=X1, bound=int)  # OK
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:68:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("Invalid1", default=X1, bound=str)  # E: int is not a subtype of str
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:74:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("Invalid2", float, str, default=Y1)  # E: upper bound int is incompatible with constraints float or str
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:77:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("AlsoOk2", int, str, bool, default=Y2)  # OK
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:78:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("AlsoInvalid2", bool, complex, default=Y2)  # E: {bool, complex} is not a superset of {int, str}
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:87:16: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

ListDefaultT = TypeVar("ListDefaultT", default=list[Z1])  # OK
               \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:90:11: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Bar(Generic[Z1, ListDefaultT]):  # OK
          \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:94:23: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Bar[Any, list]'  [invalid-annotation]

assert_type(Bar, type[Bar[Any, list[Any]]])
                      \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:95:28: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Bar[int, list[int]]'  [invalid-annotation]

assert_type(Bar[int], type[Bar[int, list[int]]])
                           \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:96:30: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Bar[int, list[int]]'  [invalid-annotation]

assert_type(Bar[int](0, []), Bar[int, list[int]])
                             \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:97:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Bar[int, list[str]]'  [invalid-annotation]

assert_type(Bar[int, list[str]](0, []), Bar[int, list[str]])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:97:41: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Bar[int, list[str]]'  [invalid-annotation]

assert_type(Bar[int, list[str]](0, []), Bar[int, list[str]])
                                        \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:98:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Bar[int, str]'  [invalid-annotation]

assert_type(Bar[int, str](0, ""), Bar[int, str])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults_referential.py:98:35: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Bar[int, str]'  [invalid-annotation]

assert_type(Bar[int, str](0, ""), Bar[int, str])
                                  \u001b[1m\u001b[31m~~~~~~~~~~~~~\u001b[39m\u001b[0m

"""
conformance_automated = "Fail"
errors_diff = """
Line 14: Unexpected errors ['generics_defaults_referential.py:14:15: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 15: Unexpected errors ['generics_defaults_referential.py:15:10: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 16: Unexpected errors ['generics_defaults_referential.py:16:9: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 17: Unexpected errors ['generics_defaults_referential.py:17:9: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 20: Unexpected errors ["generics_defaults_referential.py:20:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 23: Unexpected errors ['generics_defaults_referential.py:23:25: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class slice is not indexable [not-indexable]']
Line 24: Unexpected errors ['generics_defaults_referential.py:24:22: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class slice is not indexable [not-indexable]']
Line 25: Unexpected errors ['generics_defaults_referential.py:25:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class slice is not indexable [not-indexable]', 'generics_defaults_referential.py:25:27: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class slice is not indexable [not-indexable]']
Line 26: Unexpected errors ['generics_defaults_referential.py:26:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class slice is not indexable [not-indexable]', 'generics_defaults_referential.py:26:42: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class slice is not indexable [not-indexable]']
Line 28: Unexpected errors ['generics_defaults_referential.py:28:6: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 31: Unexpected errors ["generics_defaults_referential.py:31:11: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 35: Unexpected errors ['generics_defaults_referential.py:35:25: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Foo is not indexable [not-indexable]']
Line 43: Unexpected errors ['generics_defaults_referential.py:43:6: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 46: Unexpected errors ["generics_defaults_referential.py:46:12: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 49: Unexpected errors ['generics_defaults_referential.py:49:11: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 50: Unexpected errors ['generics_defaults_referential.py:50:10: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 66: Unexpected errors ['generics_defaults_referential.py:66:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 67: Unexpected errors ['generics_defaults_referential.py:67:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 77: Unexpected errors ['generics_defaults_referential.py:77:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 87: Unexpected errors ['generics_defaults_referential.py:87:16: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 90: Unexpected errors ["generics_defaults_referential.py:90:11: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 94: Unexpected errors ["generics_defaults_referential.py:94:23: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Bar[Any, list]'  [invalid-annotation]"]
Line 95: Unexpected errors ["generics_defaults_referential.py:95:28: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Bar[int, list[int]]'  [invalid-annotation]"]
Line 96: Unexpected errors ["generics_defaults_referential.py:96:30: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Bar[int, list[int]]'  [invalid-annotation]"]
Line 97: Unexpected errors ["generics_defaults_referential.py:97:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Bar[int, list[str]]'  [invalid-annotation]", "generics_defaults_referential.py:97:41: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Bar[int, list[str]]'  [invalid-annotation]"]
Line 98: Unexpected errors ["generics_defaults_referential.py:98:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Bar[int, str]'  [invalid-annotation]", "generics_defaults_referential.py:98:35: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Bar[int, str]'  [invalid-annotation]"]
"""
