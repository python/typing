conformant = "Unsupported"
output = """
generics_defaults.py:7:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: typing.Unpack not supported yet [not-supported-yet]

from typing import Any, Callable, Generic, Self, Unpack, assert_type
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:8:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: typing_extensions.TypeVarTuple not supported yet [not-supported-yet]

from typing_extensions import TypeVar, ParamSpec, TypeVarTuple
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:11:15: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

DefaultStrT = TypeVar("DefaultStrT", default=str)
              \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:12:15: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

DefaultIntT = TypeVar("DefaultIntT", default=int)
              \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:13:16: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

DefaultBoolT = TypeVar("DefaultBoolT", default=bool)
               \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:24:32: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class NonDefaultFollowsDefault(Generic[DefaultStrT, T]): ...  # E: non-default TypeVars cannot follow ones with defaults
                               \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:27:21: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class NoNonDefaults(Generic[DefaultStrT, DefaultIntT]): ...
                    \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:30:33: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]

assert_type(NoNonDefaults, type[NoNonDefaults[str, int]])
                                \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:31:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]

assert_type(NoNonDefaults[str], type[NoNonDefaults[str, int]])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:31:38: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]

assert_type(NoNonDefaults[str], type[NoNonDefaults[str, int]])
                                     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:32:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]

assert_type(NoNonDefaults[str, int], type[NoNonDefaults[str, int]])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:32:43: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]

assert_type(NoNonDefaults[str, int], type[NoNonDefaults[str, int]])
                                          \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:35:18: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class OneDefault(Generic[T, DefaultBoolT]): ...
                 \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:38:37: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'OneDefault[float, bool]'  [invalid-annotation]

assert_type(OneDefault[float], type[OneDefault[float, bool]])
                                    \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:39:34: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'OneDefault[float, bool]'  [invalid-annotation]

assert_type(OneDefault[float](), OneDefault[float, bool])
                                 \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:42:22: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class AllTheDefaults(Generic[T1, T2, DefaultStrT, DefaultIntT, DefaultBoolT]): ...
                     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:45:34: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[Any, Any, str, int, bool]'  [invalid-annotation]

assert_type(AllTheDefaults, type[AllTheDefaults[Any, Any, str, int, bool]])
                                 \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:47:40: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]

    AllTheDefaults[int, complex], type[AllTheDefaults[int, complex, str, int, bool]]
                                       \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:50:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int]'  [invalid-annotation]

AllTheDefaults[int]  # E: expected 2 arguments to AllTheDefaults
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:53:40: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]

    AllTheDefaults[int, complex], type[AllTheDefaults[int, complex, str, int, bool]]
                                       \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:56:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str]'  [invalid-annotation]

    AllTheDefaults[int, complex, str],
    \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:57:10: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]

    type[AllTheDefaults[int, complex, str, int, bool]],
         \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:60:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int]'  [invalid-annotation]

    AllTheDefaults[int, complex, str, int],
    \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:61:10: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]

    type[AllTheDefaults[int, complex, str, int, bool]],
         \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:64:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]

    AllTheDefaults[int, complex, str, int, bool],
    \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:65:10: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]

    type[AllTheDefaults[int, complex, str, int, bool]],
         \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:73:12: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

DefaultP = ParamSpec("DefaultP", default=[str, int])
           \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:76:23: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Class_ParamSpec(Generic[DefaultP]): ...
                      \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:79:35: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]

assert_type(Class_ParamSpec, type[Class_ParamSpec[str, int]])
                                  \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:80:32: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]

assert_type(Class_ParamSpec(), Class_ParamSpec[str, int])
                               \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:81:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]

assert_type(Class_ParamSpec[[bool, bool]](), Class_ParamSpec[bool, bool])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:81:46: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]

assert_type(Class_ParamSpec[[bool, bool]](), Class_ParamSpec[bool, bool])
                                             \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:91:26: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Class_TypeVarTuple(Generic[*DefaultTs]): ...
                         \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:94:38: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]

assert_type(Class_TypeVarTuple, type[Class_TypeVarTuple[*tuple[str, int]]])
                                     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:95:35: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]

assert_type(Class_TypeVarTuple(), Class_TypeVarTuple[str, int])
                                  \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:96:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]

assert_type(Class_TypeVarTuple[int, bool](), Class_TypeVarTuple[int, bool])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:96:46: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]

assert_type(Class_TypeVarTuple[int, bool](), Class_TypeVarTuple[int, bool])
                                             \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:103:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("Ok", bound=float, default=int)  # OK
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:104:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("Invalid", bound=str, default=int)  # E: the bound and default are incompatible
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:110:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("Ok", float, str, default=float)  # OK
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:111:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

TypeVar("Invalid", float, str, default=int)  # E: expected one of float or str got int
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:121:6: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

T4 = TypeVar("T4", default=int)
     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:127:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Any [assert-type]

assert_type(func1(0), int)
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:135:6: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

T5 = TypeVar("T5", default=bool)
     \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:138:12: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Foo5(Generic[*Ts, T5]): ...  # E
           \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:145:5: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: wrong arguments [invalid-typevar]

P = ParamSpec("P", default=[float, bool])
    \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:148:12: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Foo6(Generic[*Ts, P]): ...  # OK
           \u001b[1m\u001b[31m~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:151:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo6 is not indexable [not-indexable]

assert_type(Foo6[int, str], type[Foo6[int, str, [float, bool]]])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:151:34: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo6 is not indexable [not-indexable]

assert_type(Foo6[int, str], type[Foo6[int, str, [float, bool]]])
                                 \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:152:13: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo6 is not indexable [not-indexable]

assert_type(Foo6[int, str, [bytes]], type[Foo6[int, str, [bytes]]])
            \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:152:43: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo6 is not indexable [not-indexable]

assert_type(Foo6[int, str, [bytes]], type[Foo6[int, str, [bytes]]])
                                          \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:159:12: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]

class Foo7(Generic[DefaultIntT]):
           \u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:166:34: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo7 is not indexable [not-indexable]

assert_type(Foo7.meth, Callable[[Foo7[int]], Foo7[int]])
                                 \u001b[1m\u001b[31m~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:166:46: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: class Foo7 is not indexable [not-indexable]

assert_type(Foo7.meth, Callable[[Foo7[int]], Foo7[int]])
                                             \u001b[1m\u001b[31m~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:166:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Callable[[Any], Self] [assert-type]

assert_type(Foo7.meth, Callable[[Foo7[int]], Foo7[int]])
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

generics_defaults.py:167:1: \u001b[1m\u001b[31merror\u001b[39m\u001b[0m: in <module>: Any [assert-type]

assert_type(Foo7.attr, int)
\u001b[1m\u001b[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[39m\u001b[0m

"""
conformance_automated = "Fail"
errors_diff = """
Line 7: Unexpected errors ['generics_defaults.py:7:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: typing.Unpack not supported yet [not-supported-yet]']
Line 8: Unexpected errors ['generics_defaults.py:8:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: typing_extensions.TypeVarTuple not supported yet [not-supported-yet]']
Line 11: Unexpected errors ['generics_defaults.py:11:15: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 12: Unexpected errors ['generics_defaults.py:12:15: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 13: Unexpected errors ['generics_defaults.py:13:16: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 27: Unexpected errors ["generics_defaults.py:27:21: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 30: Unexpected errors ['generics_defaults.py:30:33: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]']
Line 31: Unexpected errors ['generics_defaults.py:31:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]', 'generics_defaults.py:31:38: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]']
Line 32: Unexpected errors ['generics_defaults.py:32:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]', 'generics_defaults.py:32:43: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class NoNonDefaults is not indexable [not-indexable]']
Line 35: Unexpected errors ["generics_defaults.py:35:18: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 38: Unexpected errors ["generics_defaults.py:38:37: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'OneDefault[float, bool]'  [invalid-annotation]"]
Line 39: Unexpected errors ["generics_defaults.py:39:34: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'OneDefault[float, bool]'  [invalid-annotation]"]
Line 42: Unexpected errors ["generics_defaults.py:42:22: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 45: Unexpected errors ["generics_defaults.py:45:34: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[Any, Any, str, int, bool]'  [invalid-annotation]"]
Line 47: Unexpected errors ["generics_defaults.py:47:40: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]"]
Line 53: Unexpected errors ["generics_defaults.py:53:40: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]"]
Line 56: Unexpected errors ["generics_defaults.py:56:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str]'  [invalid-annotation]"]
Line 57: Unexpected errors ["generics_defaults.py:57:10: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]"]
Line 60: Unexpected errors ["generics_defaults.py:60:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int]'  [invalid-annotation]"]
Line 61: Unexpected errors ["generics_defaults.py:61:10: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]"]
Line 64: Unexpected errors ["generics_defaults.py:64:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]"]
Line 65: Unexpected errors ["generics_defaults.py:65:10: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'AllTheDefaults[int, complex, str, int, bool]'  [invalid-annotation]"]
Line 73: Unexpected errors ['generics_defaults.py:73:12: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 76: Unexpected errors ["generics_defaults.py:76:23: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 79: Unexpected errors ['generics_defaults.py:79:35: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]']
Line 80: Unexpected errors ['generics_defaults.py:80:32: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]']
Line 81: Unexpected errors ['generics_defaults.py:81:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]', 'generics_defaults.py:81:46: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_ParamSpec is not indexable [not-indexable]']
Line 91: Unexpected errors ["generics_defaults.py:91:26: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 94: Unexpected errors ['generics_defaults.py:94:38: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]']
Line 95: Unexpected errors ['generics_defaults.py:95:35: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]']
Line 96: Unexpected errors ['generics_defaults.py:96:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]', 'generics_defaults.py:96:46: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Class_TypeVarTuple is not indexable [not-indexable]']
Line 103: Unexpected errors ['generics_defaults.py:103:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 110: Unexpected errors ['generics_defaults.py:110:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 121: Unexpected errors ['generics_defaults.py:121:6: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 127: Unexpected errors ['generics_defaults.py:127:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Any [assert-type]']
Line 135: Unexpected errors ['generics_defaults.py:135:6: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 145: Unexpected errors ['generics_defaults.py:145:5: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: wrong arguments [invalid-typevar]']
Line 148: Unexpected errors ["generics_defaults.py:148:12: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 151: Unexpected errors ['generics_defaults.py:151:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Foo6 is not indexable [not-indexable]', 'generics_defaults.py:151:34: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Foo6 is not indexable [not-indexable]']
Line 152: Unexpected errors ['generics_defaults.py:152:13: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Foo6 is not indexable [not-indexable]', 'generics_defaults.py:152:43: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Foo6 is not indexable [not-indexable]']
Line 159: Unexpected errors ["generics_defaults.py:159:12: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Invalid type annotation 'Generic'  [invalid-annotation]"]
Line 166: Unexpected errors ['generics_defaults.py:166:34: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Foo7 is not indexable [not-indexable]', 'generics_defaults.py:166:46: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: class Foo7 is not indexable [not-indexable]', 'generics_defaults.py:166:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Callable[[Any], Self] [assert-type]']
Line 167: Unexpected errors ['generics_defaults.py:167:1: \\x1b[1m\\x1b[31merror\\x1b[39m\\x1b[0m: in <module>: Any [assert-type]']
"""
