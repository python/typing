conformant = "Partial"
notes = """
Does not following runtime scoping rules for type parameters in all cases.
"""
conformance_automated = "Fail"
errors_diff = """
Line 92: Expected 1 errors
Line 95: Expected 1 errors
Line 98: Expected 1 errors
Line 31: Unexpected errors ['generics_syntax_scoping.py:31: error: Type variable "generics_syntax_scoping.T" is unbound']
Line 56: Unexpected errors ['generics_syntax_scoping.py:56: error: Name "S" already defined on line 55']
Line 62: Unexpected errors ['generics_syntax_scoping.py:62: error: Expression is of type "TypeVar", not "str"']
Line 88: Unexpected errors ['generics_syntax_scoping.py:88: error: Argument 1 has incompatible type "Type[ClassE]"; expected "Callable[Never, Never]"']
Line 90: Unexpected errors ['generics_syntax_scoping.py:90: error: Name "T" already defined on line 89']
Line 106: Unexpected errors ['generics_syntax_scoping.py:106: error: Name "T" already defined on line 105']
Line 108: Unexpected errors ['generics_syntax_scoping.py:108: error: Expression is of type "TypeVar", not "int"']
Line 116: Unexpected errors ['generics_syntax_scoping.py:116: error: Expression is of type "int", not "TypeVar"']
Line 121: Unexpected errors ['generics_syntax_scoping.py:121: error: Expression is of type "TypeVar", not "complex"']
Line 124: Unexpected errors ['generics_syntax_scoping.py:124: error: Expression is of type "TypeVar", not "complex"']
"""
output = """
generics_syntax_scoping.py:14: error: Variable "generics_syntax_scoping.S" is not valid as a type
generics_syntax_scoping.py:14: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
generics_syntax_scoping.py:18: error: Variable "generics_syntax_scoping.T" is not valid as a type
generics_syntax_scoping.py:18: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
generics_syntax_scoping.py:31: error: Type variable "generics_syntax_scoping.T" is unbound
generics_syntax_scoping.py:31: note: (Hint: Use "Generic[T]" or "Protocol[T]" base class to bind "T" inside a class)
generics_syntax_scoping.py:31: note: (Hint: Use "T" in function signature to bind "T" inside a function)
generics_syntax_scoping.py:35: error: Name "T" is used before definition
generics_syntax_scoping.py:44: error: Argument 1 has incompatible type "Type[ClassD]"; expected "Callable[Never, Never]"
generics_syntax_scoping.py:44: error: Name "T" is used before definition
generics_syntax_scoping.py:44: error: Variable "generics_syntax_scoping.T" is not valid as a type
generics_syntax_scoping.py:44: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases
generics_syntax_scoping.py:56: error: Name "S" already defined on line 55
generics_syntax_scoping.py:62: error: Expression is of type "TypeVar", not "str"
generics_syntax_scoping.py:88: error: Argument 1 has incompatible type "Type[ClassE]"; expected "Callable[Never, Never]"
generics_syntax_scoping.py:90: error: Name "T" already defined on line 89
generics_syntax_scoping.py:106: error: Name "T" already defined on line 105
generics_syntax_scoping.py:108: error: Expression is of type "TypeVar", not "int"
generics_syntax_scoping.py:116: error: Expression is of type "int", not "TypeVar"
generics_syntax_scoping.py:121: error: Expression is of type "TypeVar", not "complex"
generics_syntax_scoping.py:124: error: Expression is of type "TypeVar", not "complex"
"""
